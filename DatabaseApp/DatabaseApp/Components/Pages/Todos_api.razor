@page "/todos_api"
@page "/todos_api/{Username}"
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>API 기반 Todo 관리 애플리케이션: Todo List</PageTitle>
<h3>Todo List - @((string.IsNullOrEmpty(Username) ? "All Users" : Username))</h3>

<!-- API URL을 화면에 표시 -->
<p><strong>API URL:</strong> @ApiUrl</p>

@if (TodoList is null)
{
	<p>Loading...</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>#</th>
				<th>User</th>
				<th>Description</th>
				<th>Target Date</th>
				<th>IsDone</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in TodoList)
			{
				@if (EditingItemId == item.Id)
				{
					<tr>
						<td>@item.Id</td>
						<td>@item.Username</td>
						<td><input type="text" @bind="@EditingModel.Description" /></td>
						<td><input type="date" @bind-value="@EditingModel.TargetDate" @bind-value:event="oninput" /></td>
						<td><input type="checkbox" @bind="@EditingModel.IsDone" /></td>
						<td>
							<button class="btn btn-success" @onclick="SaveEdit">저장</button>
							<button class="btn btn-danger" @onclick="CancelEdit">취소</button>
						</td>
					</tr>
				}
				else
				{
					<tr>
						<td>@item.Id</td>
						<td><a href="javascript:void(0);" @onclick="() => NavigateToUserTodos(item.Username)">@item.Username</a></td> <!-- Username 클릭 시 해당 사용자 Todo 리스트로 이동 -->
						<td>@item.Description</td>
						<td>@item.TargetDate.ToString("yyyy-MM-dd")</td>
						<td>
							<input type="checkbox"
								   checked="@item.IsDone"
								   @onchange="async (e) => await UpdateIsDoneAsync(item.Id, ((ChangeEventArgs)e).Value is not null && (bool)((ChangeEventArgs)e).Value)" />
						</td>
						<td>
							<button class="btn btn-primary" @onclick="() => StartEdit(item)">수정</button>
							<button class="btn btn-danger" @onclick="() => RemoveItem(item)">삭제</button>
						</td>
					</tr>
				}
			}
		</tbody>
	</table>
}
<div>
	<input type="text" @bind="InputName" placeholder="사용자 이름" name="inputName" />
	<input type="text" @bind="InputDescription" placeholder="할 일" name="inputDescription" />
	<input type="date" @bind="InputTargetDate" name="inputTargetDate" />
	<button type="button" class="btn btn-primary" @onclick="CreateAsync">추가</button>
</div>

@code {
	[Parameter] public string Username { get; set; }
	private List<TodoModel>? TodoList;
	private string ApiUrl => string.IsNullOrEmpty(Username)
		? "https://4.217.255.124/api/todos"  // 전체 Todo 리스트
		: $"https://4.217.255.124/api/todos/users/{Uri.EscapeDataString(Username)}";  // 특정 사용자 Todo 리스트
	//? "https://localhost:7084/api/todos"  // 전체 Todo 리스트
	//	: $"https://localhost:7084/api/todos/users/{Uri.EscapeDataString(Username)}";  // 특정 사용자 Todo 리스트


	private int? EditingItemId;
	private TodoModel EditingModel = new();

	private string InputName = string.Empty;
	private string InputDescription = string.Empty;
	private DateTime InputTargetDate = DateTime.Now.Date;


	protected override async Task OnInitializedAsync()
	{
		// API에서 해당 username의 Todo list 또는 전체 Todo list를 받아오는 요청
		await LoadTodoList();
	}

	//private async Task LoadTodoList()
	//{
	//	var client = HttpClientFactory.CreateClient("API");
	//	TodoList = await client.GetFromJsonAsync<List<TodoModel>>(ApiUrl);
	//}

	private async Task LoadTodoList()
	{
		try
		{
			var client = HttpClientFactory.CreateClient("API");
			var response = await client.GetAsync(ApiUrl);
			response.EnsureSuccessStatusCode(); // 상태 코드가 2xx가 아니면 예외가 발생
			TodoList = await response.Content.ReadFromJsonAsync<List<TodoModel>>();
		}
		catch (HttpRequestException ex)
		{
			// 오류 정보 출력
			Console.WriteLine($"요청 오류: {ex.Message}");
		}
		catch (Exception ex)
		{
			// 다른 예외 처리
			Console.WriteLine($"예상치 못한 오류: {ex.Message}");
		}
	}


	private async Task CreateAsync()
	{
		var client = HttpClientFactory.CreateClient("API");
		var newTodo = new TodoModel
			{
				Username = InputName,
				Description = InputDescription,
				TargetDate = InputTargetDate,
				IsDone = false
			};
		await client.PostAsJsonAsync(ApiUrl, newTodo);
		await LoadTodoList();

		InputName = string.Empty;
		InputDescription = string.Empty;
		InputTargetDate = DateTime.Now.Date;
	}

	private void StartEdit(TodoModel item)
	{
		EditingItemId = item.Id;
		EditingModel = new TodoModel
			{
				Id = item.Id,
				Username = item.Username,
				Description = item.Description,
				IsDone = item.IsDone,
				TargetDate = item.TargetDate
			};
	}

	private async Task SaveEdit()
	{
		if (EditingItemId == null) return;

		var client = HttpClientFactory.CreateClient("API");
		await client.PutAsJsonAsync($"https://4.217.255.124/api/todos/{EditingModel.Id}", EditingModel);
		//await client.PutAsJsonAsync($"https://localhost:a/api/todos/{EditingModel.Id}", EditingModel);
		await LoadTodoList();

		EditingItemId = null;
	}

	private void CancelEdit()
	{
		EditingItemId = null;
	}

	private async Task RemoveItem(TodoModel item)
	{
		var client = HttpClientFactory.CreateClient("API");
		await client.DeleteAsync($"https://4.217.255.124/api/todos/{item.Id}");
		//await client.DeleteAsync($"https://localhost:7084/api/todos/{item.Id}");
		await LoadTodoList();
	}

	private async Task UpdateIsDoneAsync(int id, bool isDone)
	{
		var client = HttpClientFactory.CreateClient("API");
		var todo = TodoList.FirstOrDefault(t => t.Id == id);
		if (todo != null)
		{
			todo.IsDone = isDone;
			await client.PutAsJsonAsync($"https://4.217.255.124/api/todos/{id}", todo);
			//await client.PutAsJsonAsync($"https://localhost:7084/api/todos/{id}", todo);
			await LoadTodoList();
		}
	}

	// 사용자 Todo 리스트로 이동하는 메서드
	private void NavigateToUserTodos(string username)
	{
		NavigationManager.NavigateTo($"/todos_api/{username}");
	}
}
