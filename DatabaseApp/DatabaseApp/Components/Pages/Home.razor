@page "/"
@using DatabaseApp.Data;
@using DatabaseApp.Models;
@using System.Globalization;
@using Microsoft.EntityFrameworkCore;
@using Pomelo.EntityFrameworkCore.MySql;
@inject IDbContextFactory<ApplicationDbContext> factory;
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
<h3>최수진 : C#, ASP.Net Core, Blazor, Azure를 이용한 Web App</h3>


<table class="table" style="margin-left: auto; margin-right: auto; width:80%;">
	<thead>
		<tr>
			<th>Application</th>
			<th>Description</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td >Azure를 이용한 배포</td>
			<td>MicroSoft Azure를 이용하여 Blazor 애플리케이션을 원활하게 클라우드 환경에서 서비스하고, 사용자가 인터넷을 통해 실시간으로 애플리케이션을 이용할 수 있도록 합니다.</td>
		</tr>
		<tr>
			<td>GItHub을 통한 자동 배포</td>
			<td>CI/CD(지속적 통합 및 지속적 배포)의 일환으로, GitHub Actions를 사용하여 코드 변경이 있을 때마다 자동으로 애플리케이션을 빌드하고 배포하는 프로세스입니다.</td>
		</tr>
		<tr>
			<td @onclick="ServerContents"><strong>Todos_Server</strong> (클릭)</td>
			<td>서버사이드 Blazor를 활용하여 만들어진 CRUD 기반의 Todo 리스트 애플리케이션입니다. 이 애플리케이션은 서버에서 데이터를 관리하고, Blazor의 Razor 페이지를 통해 사용자가 직접 Todo 리스트를 추가, 수정, 삭제할 수 있는 기능을 제공합니다.</td>
		</tr>
		<tr>
			<td @onclick="APIContents"><strong>Todos_API</strong> (클릭)</td>
			<td>API 기반의 Todo 리스트 애플리케이션으로, 데이터는 API 서버를 통해 처리됩니다. 클라이언트는 HTTP 요청을 보내고, 서버는 JSON 데이터를 반환하여 사용자에게 Todo 리스트를 표시합니다. CRUD 기능을 API 요청을 통해 처리하며, 서버와의 상호작용은 HTTP API를 통해 이루어집니다.</td>
		</tr>
	</tbody>
</table>

@if (IsViableServer)
{
	<div style="margin-left: auto; margin-right: auto; width:80%;">
		<strong>Todo_Server 기능</strong>
		<p>데이터 베이스에 저장된 Todo List를 가져옵니다. </p>
		<p>Todo List를 수정합니다. </p>
		<p>Todo List를 삭제합니다. </p>
		<p>Todo List 항목의 완료를 설정합니다. </p>
	</div>
}

@if (IsViableAPI)
{
	<div style="margin-left: auto; margin-right: auto; width:80%;">
		<strong>Todo_API 기능</strong>
		<p>데이터 베이스에 저장된 Todo List를 API를 이용하여 가져옵니다. </p>
		<p>Todo List를 수정합니다. </p>
		<p>Todo List를 삭제합니다. </p>
		<p>Todo List 항목의 완료를 설정합니다. </p>
		<p>사용자 이름별 Todo List를 확인합니다. : 사용자 이름 클릭 </p>
		<p>기능별 사용하는 API 주소는 화면 상단에서 확인할 수 있습니다. </p>
	</div>
}

@code {
	private bool IsViableServer { get; set; } = false;
	private bool IsViableAPI { get; set; } = false;

	private void ServerContents()
	{
		IsViableServer = !IsViableServer;
		IsViableAPI = false;

	}

	private void APIContents()
	{
		IsViableAPI = !IsViableAPI;
		IsViableServer = false;
	}
}